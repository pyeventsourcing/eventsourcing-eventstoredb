[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "eventsourcing-eventstoredb"
version = "1.2.0b4"
dependencies = [
  "eventsourcing>=9.4.1,<10.0",
  "kurrentdbclient>=1.0.2,<2.0",
]
description = "Python package for eventsourcing with EventStoreDB"
license = { text = "BSD-3-Clause" }
readme = "README.md"
requires-python = ">=3.9.2"
authors = [
    { "name" = "John Bywater", "email" = "john.bywater@appropriatesoftware.net" },
]
classifiers = [
#    "Development Status :: 3 - Alpha",
    "Development Status :: 4 - Beta",
#    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
homepage = "https://github.com/pyeventsourcing/eventsourcing-eventstoredb"
repository = "https://github.com/pyeventsourcing/eventsourcing-eventstoredb"

[tool.poetry]
include = ["eventsourcing_eventstoredb/py.typed"]

[tool.poetry.group.dev.dependencies]
black = { version = "*", allow-prereleases = true }
flake8 = "*"
flake8-broken-line = { version = "*", python = ">=3.9.2,<4.0"}
flake8-bugbear = "*"
flake8-coding = "*"
flake8-isort = "*"
flake8-tidy-imports = "*"
isort = "*"
mypy = "*"
pre-commit = "*"
pre-commit-hooks = "*"
pytest = "*"
pytest-cov = "*"
pycryptodome = "*"
types-protobuf = "*"

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'
preview = true
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.pip-cache
  | \.poetry
  | \.venv
  | \.vscode
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.coverage.run]
branch = true
source = [
    "eventsourcing_eventstoredb"
]
relative_files = true
omit = [
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
#  # Don't complain about missing debug-only code:
#  "def __repr__",
#  "if self.debug",
#  # Don't complain about some magic methods:
#  "def __str__",
#  # Don't complain if tests don't hit defensive assertion code:
#  "raise AssertionError",
  "raise NotImplementedError",
#  # Don't complain if non-runnable code isn't run:
#  "if 0:",
#  "if __name__ == .__main__.:",
#  # Don't complain about empty realizations
#  "pass",
#  # Don't complain about abstract methods
#  "@abc.abstractmethod"
]
#ignore_errors = true
#precision = 2
exclude_also = [
    'if TYPE_CHECKING:'
]

[tool.isort]
combine_as_imports = true
profile = "black"
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
skip = ".eggs,.pip-cache,.poetry,venv,.venv,dist"
