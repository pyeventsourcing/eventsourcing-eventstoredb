[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "eventsourcing-kurrentdb"
version = "1.2.2"
dependencies = [
  "eventsourcing>=9.4.5,<10.0",
  "kurrentdbclient>=1.0.2,<2.0",
]
description = "Python package for eventsourcing with KurrentDB"
license = { text = "BSD-3-Clause" }
readme = "README.md"
requires-python = ">=3.9.2"
authors = [
    { "name" = "John Bywater", "email" = "john.bywater@appropriatesoftware.net" },
]
classifiers = [
#    "Development Status :: 3 - Alpha",
#    "Development Status :: 4 - Beta",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
homepage = "https://github.com/pyeventsourcing/eventsourcing-kurrentdb"
repository = "https://github.com/pyeventsourcing/eventsourcing-kurrentdb"

[tool.poetry]
include = ["eventsourcing_kurrentdb/py.typed"]

[tool.poetry.group.dev.dependencies]
black = { version = "*", allow-prereleases = true }
coverage = "^7.2.7"
isort = "*"
mypy = "*"
ruff = "*"
pyright = "*"
pycryptodome = "*"
types-protobuf = "*"
#eventsourcing = {path = "../eventsourcing", develop = true}

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
preview = true
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.pip-cache
  | \.poetry
  | \.venv
  | \.vscode
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.coverage.run]
branch = true
source = [
    "eventsourcing_kurrentdb"
]
relative_files = true
omit = [
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
#  # Don't complain about missing debug-only code:
#  "def __repr__",
#  "if self.debug",
#  # Don't complain about some magic methods:
#  "def __str__",
#  # Don't complain if tests don't hit defensive assertion code:
#  "raise AssertionError",
  "raise NotImplementedError",
#  # Don't complain if non-runnable code isn't run:
#  "if 0:",
#  "if __name__ == .__main__.:",
#  # Don't complain about empty realizations
#  "pass",
#  # Don't complain about abstract methods
#  "@abc.abstractmethod"
]
#ignore_errors = true
#precision = 2
exclude_also = [
    'if TYPE_CHECKING:'
]

[tool.isort]
combine_as_imports = true
profile = "black"
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
skip = ".eggs,.pip-cache,.poetry,venv,.venv,dist"

[tool.ruff]
# Same as Black.
line-length = 88
#indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    "ANN204",  # Missing return type annotation for special method `__init__`
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "D",  # Todo: Actually do docstrings...
    "PT",  # Pytest linting.
    "ERA",  # Commented out code.
    "COM812",  # Trailing comma missing
    "FIX",  # Line contains TODO, consider resolving the issue
    "ARG002",  # Unused method argument
    "BLE",  # Do not catch blind exception
#    "C901",  # is too complex
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue line for this TODO
    "TC006",  # Add quotes to type expression in `typing.cast()`
    "PLR0915",  # Too many statements
    "PLR0912", # Too many branches
    "S101", # Use of `assert` detected
    "PLR2004", # Magic value used in comparison

]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"*tests/*" = [
    "D",
    "T201",  # `print` found
    "SLF",  # private member access
]
"*/sqlite.py" = [
    "S608",  # Possible SQL injection vector through string-based query construction
]
"examples/shopstandard/domain.py" = [
    "A002",
]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
#docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
#docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10

[tool.pyright]
include = [
    "eventsourcing_kurrentdb",
    "tests",
]
pythonVersion = "3.9"
typeCheckingMode = "standard"
